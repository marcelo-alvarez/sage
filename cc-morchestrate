#!/usr/bin/env python3
"""
Claude Code Orchestrator - Meta mode system-wide executable command
"""

import sys
import os
import argparse

# Add the global orchestrator directory to the Python path
orchestrator_dir = os.path.expanduser("~/.claude-orchestrator")
sys.path.insert(0, orchestrator_dir)

# Import the main orchestrate functionality
try:
    from orchestrate import main as orchestrate_main, ClaudeCodeOrchestrator, serve_command, show_help
    from process_manager import ProcessManager
except ImportError as e:
    print(f"Error: Could not import orchestrator modules: {e}")
    print(f"Make sure the orchestrator is properly installed in {orchestrator_dir}")
    print("Try running the installer: curl -fsSL https://raw.githubusercontent.com/marcelo-alvarez/claude-orchestrator/main/install.sh | bash")
    sys.exit(1)


def main():
    """CLI entry point for cc-morchestrate command (meta mode)"""
    
    parser = argparse.ArgumentParser(description='Claude Code Orchestrator (Meta Mode)')
    parser.add_argument('command', nargs='?', default='continue',
                       help='Command to execute (serve, stop, continue, etc.)')
    parser.add_argument('--no-browser', action='store_true',
                       help='Suppress browser opening for CI/CD environments')
    parser.add_argument('--interactive', action='store_true',
                       help='Run in interactive mode (default is headless)')
    parser.add_argument('modification_text', nargs='*',
                       help='Modification text for modify-criteria command')
    
    args = parser.parse_args()
    command = args.command
    
    # Handle the main commands directly here for better control
    if command == "stop":
        # Stop all META orchestrator processes system-wide
        # Initialize ProcessManager in meta mode
        process_manager = ProcessManager(meta_mode=True)
        success = process_manager.cleanup_system_wide()
        if success:
            print("All meta orchestrator processes have been stopped.")
            sys.exit(0)
        else:
            print("Warning: Some meta processes may not have been terminated properly.")
            sys.exit(1)
    
    elif command == "serve":
        # Add meta flag and delegate to serve command
        # Modify args to include meta mode indication
        os.environ['CLAUDE_ORCHESTRATOR_META_MODE'] = '1'
        serve_command(args)
    
    elif command == "help":
        print("cc-morchestrate - Claude Code Orchestrator (Meta Mode)")
        print("Same commands as cc-orchestrate but operates in meta mode")
        print("Meta mode uses .agent-outputs-meta/ and .claude-meta/ directories")
        print()
        show_help()
    
    else:
        # For all other commands, delegate to the main orchestrate function
        # but add the 'meta' flag to run in meta mode
        original_argv = sys.argv[:]
        sys.argv = ['orchestrate.py'] + sys.argv[1:] + ['meta']
        try:
            orchestrate_main()
        except SystemExit as e:
            sys.exit(e.code)
        finally:
            sys.argv = original_argv


if __name__ == "__main__":
    main()