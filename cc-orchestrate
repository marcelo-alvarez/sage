#!/usr/bin/env python3
"""
Claude Code Orchestrator - System-wide executable command
"""

import sys
import os
import argparse

# Add the global orchestrator directory to the Python path
orchestrator_dir = os.path.expanduser("~/.claude-orchestrator")
sys.path.insert(0, orchestrator_dir)

# Import the main orchestrate functionality
try:
    from orchestrate import main as orchestrate_main, ClaudeCodeOrchestrator, serve_command, clear_ui_command, show_help
    from process_manager import ProcessManager
except ImportError as e:
    print(f"Error: Could not import orchestrator modules: {e}")
    print(f"Make sure the orchestrator is properly installed in {orchestrator_dir}")
    print("Try running the installer: curl -fsSL https://raw.githubusercontent.com/marcelo-alvarez/claude-orchestrator/main/install.sh | bash")
    sys.exit(1)


def main():
    """CLI entry point for cc-orchestrate command"""
    
    parser = argparse.ArgumentParser(description='Claude Code Orchestrator')
    parser.add_argument('command', nargs='?', default='continue',
                       help='Command to execute (serve, stop, clear-ui, continue, etc.)')
    parser.add_argument('--no-browser', action='store_true',
                       help='Suppress browser opening for CI/CD environments')
    parser.add_argument('--interactive', action='store_true',
                       help='Run in interactive mode (default is headless)')
    parser.add_argument('modification_text', nargs='*',
                       help='Modification text for modify-criteria command')
    
    args = parser.parse_args()
    command = args.command
    
    # Handle the main commands directly here for better control
    if command == "stop":
        # Stop all orchestrator processes system-wide
        process_manager = ProcessManager()
        success = process_manager.cleanup_system_wide()
        if success:
            print("All orchestrator processes have been stopped.")
            sys.exit(0)
        else:
            print("Warning: Some processes may not have been terminated properly.")
            sys.exit(1)
    
    elif command == "serve":
        serve_command(args)
    
    elif command == "clear-ui":
        clear_ui_command(args)
    
    elif command == "help":
        show_help()
    
    else:
        # For all other commands, delegate to the main orchestrate function
        # but first modify sys.argv to match what orchestrate.py expects
        original_argv = sys.argv[:]
        sys.argv = ['orchestrate.py'] + sys.argv[1:]
        try:
            orchestrate_main()
        except SystemExit as e:
            sys.exit(e.code)
        finally:
            sys.argv = original_argv


if __name__ == "__main__":
    main()